### YamlMime:ManagedReference
items:
- uid: Scrapbook101core.GeoCodeHelper
  commentId: T:Scrapbook101core.GeoCodeHelper
  id: GeoCodeHelper
  parent: Scrapbook101core
  children:
  - Scrapbook101core.GeoCodeHelper.GetGeocode(System.String)
  langs:
  - csharp
  - vb
  name: GeoCodeHelper
  nameWithType: GeoCodeHelper
  fullName: Scrapbook101core.GeoCodeHelper
  type: Class
  source:
    remote:
      path: Scrapbook101core/Geocode.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: GeoCodeHelper
    path: ../Scrapbook101core/Geocode.cs
    startLine: 9
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  summary: "\nDefines a static method to convert a string location to a geocode (latitude and longitude).\n"
  example: []
  syntax:
    content: 'public static class GeoCodeHelper : object'
    content.vb: >-
      Public Module GeoCodeHelper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Scrapbook101core.GeoCodeHelper.GetGeocode(System.String)
  commentId: M:Scrapbook101core.GeoCodeHelper.GetGeocode(System.String)
  id: GetGeocode(System.String)
  parent: Scrapbook101core.GeoCodeHelper
  langs:
  - csharp
  - vb
  name: GetGeocode(String)
  nameWithType: GeoCodeHelper.GetGeocode(String)
  fullName: Scrapbook101core.GeoCodeHelper.GetGeocode(System.String)
  type: Method
  source:
    remote:
      path: Scrapbook101core/Geocode.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: GetGeocode
    path: ../Scrapbook101core/Geocode.cs
    startLine: 17
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  summary: "\nGets the geocode (latitude, longitude) from a string location description.\n"
  example: []
  syntax:
    content: public static Task<double[]> GetGeocode(string location)
    parameters:
    - id: location
      type: System.String
      description: A string describing a location. For example, &quot;Seattle, WA&quot; or &quot;Italy&quot;.
    return:
      type: Task{System.Double[]}
      description: A struct of doubles representing longitude and latitude.
    content.vb: Public Shared Function GetGeocode(location As String) As Task(Of Double())
  overload: Scrapbook101core.GeoCodeHelper.GetGeocode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Scrapbook101core
  commentId: N:Scrapbook101core
  name: Scrapbook101core
  nameWithType: Scrapbook101core
  fullName: Scrapbook101core
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Scrapbook101core.GeoCodeHelper.GetGeocode*
  commentId: Overload:Scrapbook101core.GeoCodeHelper.GetGeocode
  name: GetGeocode
  nameWithType: GeoCodeHelper.GetGeocode
  fullName: Scrapbook101core.GeoCodeHelper.GetGeocode
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task{System.Double[]}
  commentId: '!:Task{System.Double[]}'
  definition: Task`1
  name: Task<Double[]>
  nameWithType: Task<Double[]>
  fullName: Task<System.Double[]>
  nameWithType.vb: Task(Of Double())
  fullName.vb: Task(Of System.Double())
  name.vb: Task(Of Double())
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
