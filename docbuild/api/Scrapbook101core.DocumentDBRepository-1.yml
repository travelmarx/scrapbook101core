### YamlMime:ManagedReference
items:
- uid: Scrapbook101core.DocumentDBRepository`1
  commentId: T:Scrapbook101core.DocumentDBRepository`1
  id: DocumentDBRepository`1
  parent: Scrapbook101core
  children:
  - Scrapbook101core.DocumentDBRepository`1.CreateItemAsync(`0)
  - Scrapbook101core.DocumentDBRepository`1.DeleteItemAsync(System.String)
  - Scrapbook101core.DocumentDBRepository`1.GetCategoryListDocumentAsync
  - Scrapbook101core.DocumentDBRepository`1.GetItemAsync(System.String)
  - Scrapbook101core.DocumentDBRepository`1.GetItemsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Scrapbook101core.DocumentDBRepository`1.Initialize
  - Scrapbook101core.DocumentDBRepository`1.UpdateItemAsync(System.String,`0)
  langs:
  - csharp
  - vb
  name: DocumentDBRepository<T>
  nameWithType: DocumentDBRepository<T>
  fullName: Scrapbook101core.DocumentDBRepository<T>
  type: Class
  source:
    remote:
      path: Scrapbook101core/DocumentDBRepository.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: DocumentDBRepository
    path: ../Scrapbook101core/DocumentDBRepository.cs
    startLine: 45
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  summary: "\nDefines the methods for working with the Document DB repository. Also contains methods for initializing\na new repository if the application is configured to do so.\n"
  example: []
  syntax:
    content: >-
      public static class DocumentDBRepository<T>
          where T : class
    typeParameters:
    - id: T
      description: The Item class which represents a repository item.
    content.vb: Public Module DocumentDBRepository(Of T As Class)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: DocumentDBRepository(Of T)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T)
  name.vb: DocumentDBRepository(Of T)
- uid: Scrapbook101core.DocumentDBRepository`1.GetItemAsync(System.String)
  commentId: M:Scrapbook101core.DocumentDBRepository`1.GetItemAsync(System.String)
  id: GetItemAsync(System.String)
  parent: Scrapbook101core.DocumentDBRepository`1
  langs:
  - csharp
  - vb
  name: GetItemAsync(String)
  nameWithType: DocumentDBRepository<T>.GetItemAsync(String)
  fullName: Scrapbook101core.DocumentDBRepository<T>.GetItemAsync(System.String)
  type: Method
  source:
    remote:
      path: Scrapbook101core/DocumentDBRepository.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: GetItemAsync
    path: ../Scrapbook101core/DocumentDBRepository.cs
    startLine: 52
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  syntax:
    content: public static Task<T> GetItemAsync(string id)
    parameters:
    - id: id
      type: System.String
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Shared Function GetItemAsync(id As String) As Task(Of T)
  overload: Scrapbook101core.DocumentDBRepository`1.GetItemAsync*
  nameWithType.vb: DocumentDBRepository(Of T).GetItemAsync(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).GetItemAsync(System.String)
- uid: Scrapbook101core.DocumentDBRepository`1.GetItemsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Scrapbook101core.DocumentDBRepository`1.GetItemsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: GetItemsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Scrapbook101core.DocumentDBRepository`1
  langs:
  - csharp
  - vb
  name: GetItemsAsync(Expression<Func<T, Boolean>>)
  nameWithType: DocumentDBRepository<T>.GetItemsAsync(Expression<Func<T, Boolean>>)
  fullName: Scrapbook101core.DocumentDBRepository<T>.GetItemsAsync(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Scrapbook101core/DocumentDBRepository.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: GetItemsAsync
    path: ../Scrapbook101core/DocumentDBRepository.cs
    startLine: 72
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  syntax:
    content: public static Task<IEnumerable<T>> GetItemsAsync(Expression<Func<T, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
    content.vb: Public Shared Function GetItemsAsync(predicate As Expression(Of Func(Of T, Boolean))) As Task(Of IEnumerable(Of T))
  overload: Scrapbook101core.DocumentDBRepository`1.GetItemsAsync*
  nameWithType.vb: DocumentDBRepository(Of T).GetItemsAsync(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).GetItemsAsync(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: GetItemsAsync(Expression(Of Func(Of T, Boolean)))
- uid: Scrapbook101core.DocumentDBRepository`1.CreateItemAsync(`0)
  commentId: M:Scrapbook101core.DocumentDBRepository`1.CreateItemAsync(`0)
  id: CreateItemAsync(`0)
  parent: Scrapbook101core.DocumentDBRepository`1
  langs:
  - csharp
  - vb
  name: CreateItemAsync(T)
  nameWithType: DocumentDBRepository<T>.CreateItemAsync(T)
  fullName: Scrapbook101core.DocumentDBRepository<T>.CreateItemAsync(T)
  type: Method
  source:
    remote:
      path: Scrapbook101core/DocumentDBRepository.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: CreateItemAsync
    path: ../Scrapbook101core/DocumentDBRepository.cs
    startLine: 89
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  syntax:
    content: public static Task<Document> CreateItemAsync(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task{Document}
    content.vb: Public Shared Function CreateItemAsync(item As T) As Task(Of Document)
  overload: Scrapbook101core.DocumentDBRepository`1.CreateItemAsync*
  nameWithType.vb: DocumentDBRepository(Of T).CreateItemAsync(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).CreateItemAsync(T)
- uid: Scrapbook101core.DocumentDBRepository`1.UpdateItemAsync(System.String,`0)
  commentId: M:Scrapbook101core.DocumentDBRepository`1.UpdateItemAsync(System.String,`0)
  id: UpdateItemAsync(System.String,`0)
  parent: Scrapbook101core.DocumentDBRepository`1
  langs:
  - csharp
  - vb
  name: UpdateItemAsync(String, T)
  nameWithType: DocumentDBRepository<T>.UpdateItemAsync(String, T)
  fullName: Scrapbook101core.DocumentDBRepository<T>.UpdateItemAsync(System.String, T)
  type: Method
  source:
    remote:
      path: Scrapbook101core/DocumentDBRepository.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: UpdateItemAsync
    path: ../Scrapbook101core/DocumentDBRepository.cs
    startLine: 94
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  syntax:
    content: public static Task<Document> UpdateItemAsync(string id, T item)
    parameters:
    - id: id
      type: System.String
    - id: item
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task{Document}
    content.vb: Public Shared Function UpdateItemAsync(id As String, item As T) As Task(Of Document)
  overload: Scrapbook101core.DocumentDBRepository`1.UpdateItemAsync*
  nameWithType.vb: DocumentDBRepository(Of T).UpdateItemAsync(String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).UpdateItemAsync(System.String, T)
- uid: Scrapbook101core.DocumentDBRepository`1.DeleteItemAsync(System.String)
  commentId: M:Scrapbook101core.DocumentDBRepository`1.DeleteItemAsync(System.String)
  id: DeleteItemAsync(System.String)
  parent: Scrapbook101core.DocumentDBRepository`1
  langs:
  - csharp
  - vb
  name: DeleteItemAsync(String)
  nameWithType: DocumentDBRepository<T>.DeleteItemAsync(String)
  fullName: Scrapbook101core.DocumentDBRepository<T>.DeleteItemAsync(System.String)
  type: Method
  source:
    remote:
      path: Scrapbook101core/DocumentDBRepository.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: DeleteItemAsync
    path: ../Scrapbook101core/DocumentDBRepository.cs
    startLine: 99
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  syntax:
    content: public static Task DeleteItemAsync(string id)
    parameters:
    - id: id
      type: System.String
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function DeleteItemAsync(id As String) As Task
  overload: Scrapbook101core.DocumentDBRepository`1.DeleteItemAsync*
  nameWithType.vb: DocumentDBRepository(Of T).DeleteItemAsync(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).DeleteItemAsync(System.String)
- uid: Scrapbook101core.DocumentDBRepository`1.Initialize
  commentId: M:Scrapbook101core.DocumentDBRepository`1.Initialize
  id: Initialize
  parent: Scrapbook101core.DocumentDBRepository`1
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: DocumentDBRepository<T>.Initialize()
  fullName: Scrapbook101core.DocumentDBRepository<T>.Initialize()
  type: Method
  source:
    remote:
      path: Scrapbook101core/DocumentDBRepository.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Initialize
    path: ../Scrapbook101core/DocumentDBRepository.cs
    startLine: 104
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  syntax:
    content: public static void Initialize()
    content.vb: Public Shared Sub Initialize
  overload: Scrapbook101core.DocumentDBRepository`1.Initialize*
  nameWithType.vb: DocumentDBRepository(Of T).Initialize()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).Initialize()
- uid: Scrapbook101core.DocumentDBRepository`1.GetCategoryListDocumentAsync
  commentId: M:Scrapbook101core.DocumentDBRepository`1.GetCategoryListDocumentAsync
  id: GetCategoryListDocumentAsync
  parent: Scrapbook101core.DocumentDBRepository`1
  langs:
  - csharp
  - vb
  name: GetCategoryListDocumentAsync()
  nameWithType: DocumentDBRepository<T>.GetCategoryListDocumentAsync()
  fullName: Scrapbook101core.DocumentDBRepository<T>.GetCategoryListDocumentAsync()
  type: Method
  source:
    remote:
      path: Scrapbook101core/DocumentDBRepository.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: GetCategoryListDocumentAsync
    path: ../Scrapbook101core/DocumentDBRepository.cs
    startLine: 212
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core
  syntax:
    content: public static Task<bool> GetCategoryListDocumentAsync()
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function GetCategoryListDocumentAsync As Task(Of Boolean)
  overload: Scrapbook101core.DocumentDBRepository`1.GetCategoryListDocumentAsync*
  nameWithType.vb: DocumentDBRepository(Of T).GetCategoryListDocumentAsync()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).GetCategoryListDocumentAsync()
references:
- uid: Scrapbook101core
  commentId: N:Scrapbook101core
  name: Scrapbook101core
  nameWithType: Scrapbook101core
  fullName: Scrapbook101core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Scrapbook101core.DocumentDBRepository`1.GetItemAsync*
  commentId: Overload:Scrapbook101core.DocumentDBRepository`1.GetItemAsync
  name: GetItemAsync
  nameWithType: DocumentDBRepository<T>.GetItemAsync
  fullName: Scrapbook101core.DocumentDBRepository<T>.GetItemAsync
  nameWithType.vb: DocumentDBRepository(Of T).GetItemAsync
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).GetItemAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Scrapbook101core.DocumentDBRepository`1.GetItemsAsync*
  commentId: Overload:Scrapbook101core.DocumentDBRepository`1.GetItemsAsync
  name: GetItemsAsync
  nameWithType: DocumentDBRepository<T>.GetItemsAsync
  fullName: Scrapbook101core.DocumentDBRepository<T>.GetItemsAsync
  nameWithType.vb: DocumentDBRepository(Of T).GetItemsAsync
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).GetItemsAsync
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<T>>
  nameWithType: Task<IEnumerable<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Task(Of IEnumerable(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: Task(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Scrapbook101core.DocumentDBRepository`1.CreateItemAsync*
  commentId: Overload:Scrapbook101core.DocumentDBRepository`1.CreateItemAsync
  name: CreateItemAsync
  nameWithType: DocumentDBRepository<T>.CreateItemAsync
  fullName: Scrapbook101core.DocumentDBRepository<T>.CreateItemAsync
  nameWithType.vb: DocumentDBRepository(Of T).CreateItemAsync
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).CreateItemAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{Document}
  commentId: T:System.Threading.Tasks.Task{Document}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Document>
  nameWithType: Task<Document>
  fullName: System.Threading.Tasks.Task<Document>
  nameWithType.vb: Task(Of Document)
  fullName.vb: System.Threading.Tasks.Task(Of Document)
  name.vb: Task(Of Document)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Document
    name: Document
    nameWithType: Document
    fullName: Document
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Document
    name: Document
    nameWithType: Document
    fullName: Document
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Scrapbook101core.DocumentDBRepository`1.UpdateItemAsync*
  commentId: Overload:Scrapbook101core.DocumentDBRepository`1.UpdateItemAsync
  name: UpdateItemAsync
  nameWithType: DocumentDBRepository<T>.UpdateItemAsync
  fullName: Scrapbook101core.DocumentDBRepository<T>.UpdateItemAsync
  nameWithType.vb: DocumentDBRepository(Of T).UpdateItemAsync
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).UpdateItemAsync
- uid: Scrapbook101core.DocumentDBRepository`1.DeleteItemAsync*
  commentId: Overload:Scrapbook101core.DocumentDBRepository`1.DeleteItemAsync
  name: DeleteItemAsync
  nameWithType: DocumentDBRepository<T>.DeleteItemAsync
  fullName: Scrapbook101core.DocumentDBRepository<T>.DeleteItemAsync
  nameWithType.vb: DocumentDBRepository(Of T).DeleteItemAsync
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).DeleteItemAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Scrapbook101core.DocumentDBRepository`1.Initialize*
  commentId: Overload:Scrapbook101core.DocumentDBRepository`1.Initialize
  name: Initialize
  nameWithType: DocumentDBRepository<T>.Initialize
  fullName: Scrapbook101core.DocumentDBRepository<T>.Initialize
  nameWithType.vb: DocumentDBRepository(Of T).Initialize
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).Initialize
- uid: Scrapbook101core.DocumentDBRepository`1.GetCategoryListDocumentAsync*
  commentId: Overload:Scrapbook101core.DocumentDBRepository`1.GetCategoryListDocumentAsync
  name: GetCategoryListDocumentAsync
  nameWithType: DocumentDBRepository<T>.GetCategoryListDocumentAsync
  fullName: Scrapbook101core.DocumentDBRepository<T>.GetCategoryListDocumentAsync
  nameWithType.vb: DocumentDBRepository(Of T).GetCategoryListDocumentAsync
  fullName.vb: Scrapbook101core.DocumentDBRepository(Of T).GetCategoryListDocumentAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
