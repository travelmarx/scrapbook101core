### YamlMime:ManagedReference
items:
- uid: Scrapbook101core.Models.Item
  commentId: T:Scrapbook101core.Models.Item
  id: Item
  parent: Scrapbook101core.Models
  children:
  - Scrapbook101core.Models.Item.AssetPath
  - Scrapbook101core.Models.Item.Assets
  - Scrapbook101core.Models.Item.Category
  - Scrapbook101core.Models.Item.CategoryFields
  - Scrapbook101core.Models.Item.DateAdded
  - Scrapbook101core.Models.Item.DateUpdated
  - Scrapbook101core.Models.Item.Description
  - Scrapbook101core.Models.Item.GeoLocation
  - Scrapbook101core.Models.Item.Id
  - Scrapbook101core.Models.Item.Location
  - Scrapbook101core.Models.Item.Rating
  - Scrapbook101core.Models.Item.Title
  - Scrapbook101core.Models.Item.Type
  - Scrapbook101core.Models.Item.UpdatedBy
  langs:
  - csharp
  - vb
  name: Item
  nameWithType: Item
  fullName: Scrapbook101core.Models.Item
  type: Class
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Item
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 15
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  summary: "\nDefines the main Scrapbook item or entry.\n"
  remarks: "\nA Scrapbook Item object when written to the Document DB bcomes a block of JSON-formatted text.\nNot all properties are required.\n"
  example: []
  syntax:
    content: public class Item
    content.vb: Public Class Item
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Scrapbook101core.Models.Item.Assets
  commentId: P:Scrapbook101core.Models.Item.Assets
  id: Assets
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Assets
  nameWithType: Item.Assets
  fullName: Scrapbook101core.Models.Item.Assets
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Assets
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 20
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "assets")]

      public List<AssetItem> Assets { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Scrapbook101core.Models.AssetItem}
      description: "\nA list of assets associated with the Item. There can be no assets associated.\n"
    content.vb: >-
      <JsonProperty(PropertyName:="assets")>

      Public Property Assets As List(Of AssetItem)
  overload: Scrapbook101core.Models.Item.Assets*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: assets
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.AssetPath
  commentId: P:Scrapbook101core.Models.Item.AssetPath
  id: AssetPath
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: AssetPath
  nameWithType: Item.AssetPath
  fullName: Scrapbook101core.Models.Item.AssetPath
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: AssetPath
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 23
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "assetPath")]

      public string AssetPath { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(PropertyName:="assetPath")>

      Public Property AssetPath As String
  overload: Scrapbook101core.Models.Item.AssetPath*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: assetPath
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Category
  commentId: P:Scrapbook101core.Models.Item.Category
  id: Category
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Category
  nameWithType: Item.Category
  fullName: Scrapbook101core.Models.Item.Category
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Category
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 26
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [Required(ErrorMessage = "Category is required.")]

      [JsonProperty(PropertyName = "category")]

      public string Category { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required(ErrorMessage:="Category is required.")>

      <JsonProperty(PropertyName:="category")>

      Public Property Category As String
  overload: Scrapbook101core.Models.Item.Category*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: Category is required.
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: category
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.CategoryFields
  commentId: P:Scrapbook101core.Models.Item.CategoryFields
  id: CategoryFields
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: CategoryFields
  nameWithType: Item.CategoryFields
  fullName: Scrapbook101core.Models.Item.CategoryFields
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: CategoryFields
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 30
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "categoryFields")]

      public CategoryFields CategoryFields { get; set; }
    parameters: []
    return:
      type: Scrapbook101core.Models.CategoryFields
    content.vb: >-
      <JsonProperty(PropertyName:="categoryFields")>

      Public Property CategoryFields As CategoryFields
  overload: Scrapbook101core.Models.Item.CategoryFields*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: categoryFields
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.DateAdded
  commentId: P:Scrapbook101core.Models.Item.DateAdded
  id: DateAdded
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: DateAdded
  nameWithType: Item.DateAdded
  fullName: Scrapbook101core.Models.Item.DateAdded
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: DateAdded
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 33
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "dateAdded")]

      public DateTime DateAdded { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: >-
      <JsonProperty(PropertyName:="dateAdded")>

      Public Property DateAdded As Date
  overload: Scrapbook101core.Models.Item.DateAdded*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: dateAdded
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.DateUpdated
  commentId: P:Scrapbook101core.Models.Item.DateUpdated
  id: DateUpdated
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: DateUpdated
  nameWithType: Item.DateUpdated
  fullName: Scrapbook101core.Models.Item.DateUpdated
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: DateUpdated
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 36
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "dateUpdated")]

      public DateTime DateUpdated { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: >-
      <JsonProperty(PropertyName:="dateUpdated")>

      Public Property DateUpdated As Date
  overload: Scrapbook101core.Models.Item.DateUpdated*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: dateUpdated
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Description
  commentId: P:Scrapbook101core.Models.Item.Description
  id: Description
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Item.Description
  fullName: Scrapbook101core.Models.Item.Description
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Description
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 39
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "description")]

      public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(PropertyName:="description")>

      Public Property Description As String
  overload: Scrapbook101core.Models.Item.Description*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: description
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.GeoLocation
  commentId: P:Scrapbook101core.Models.Item.GeoLocation
  id: GeoLocation
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: GeoLocation
  nameWithType: Item.GeoLocation
  fullName: Scrapbook101core.Models.Item.GeoLocation
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: GeoLocation
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 42
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "geoLocation")]

      public Point GeoLocation { get; set; }
    parameters: []
    return:
      type: Microsoft.Azure.Documents.Spatial.Point
    content.vb: >-
      <JsonProperty(PropertyName:="geoLocation")>

      Public Property GeoLocation As Point
  overload: Scrapbook101core.Models.Item.GeoLocation*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: geoLocation
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Id
  commentId: P:Scrapbook101core.Models.Item.Id
  id: Id
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Item.Id
  fullName: Scrapbook101core.Models.Item.Id
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Id
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 45
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "id")]

      public string Id { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(PropertyName:="id")>

      Public Property Id As String
  overload: Scrapbook101core.Models.Item.Id*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: id
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Location
  commentId: P:Scrapbook101core.Models.Item.Location
  id: Location
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: Item.Location
  fullName: Scrapbook101core.Models.Item.Location
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Location
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 48
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "location")]

      public string Location { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(PropertyName:="location")>

      Public Property Location As String
  overload: Scrapbook101core.Models.Item.Location*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: location
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Rating
  commentId: P:Scrapbook101core.Models.Item.Rating
  id: Rating
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Rating
  nameWithType: Item.Rating
  fullName: Scrapbook101core.Models.Item.Rating
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Rating
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 51
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "rating")]

      public string Rating { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(PropertyName:="rating")>

      Public Property Rating As String
  overload: Scrapbook101core.Models.Item.Rating*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: rating
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.UpdatedBy
  commentId: P:Scrapbook101core.Models.Item.UpdatedBy
  id: UpdatedBy
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: UpdatedBy
  nameWithType: Item.UpdatedBy
  fullName: Scrapbook101core.Models.Item.UpdatedBy
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: UpdatedBy
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 54
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(PropertyName = "updatedBy")]

      public string UpdatedBy { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(PropertyName:="updatedBy")>

      Public Property UpdatedBy As String
  overload: Scrapbook101core.Models.Item.UpdatedBy*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: updatedBy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Title
  commentId: P:Scrapbook101core.Models.Item.Title
  id: Title
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: Item.Title
  fullName: Scrapbook101core.Models.Item.Title
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Title
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 57
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [Required(ErrorMessage = "Title is required.")]

      [JsonProperty(PropertyName = "title")]

      public string Title { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required(ErrorMessage:="Title is required.")>

      <JsonProperty(PropertyName:="title")>

      Public Property Title As String
  overload: Scrapbook101core.Models.Item.Title*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: Title is required.
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: title
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Type
  commentId: P:Scrapbook101core.Models.Item.Type
  id: Type
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Item.Type
  fullName: Scrapbook101core.Models.Item.Type
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Type
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 61
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [Required(ErrorMessage = "Type is required.")]

      [JsonProperty(PropertyName = "type")]

      public string Type { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required(ErrorMessage:="Type is required.")>

      <JsonProperty(PropertyName:="type")>

      Public Property Type As String
  overload: Scrapbook101core.Models.Item.Type*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: Type is required.
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: type
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Scrapbook101core.Models
  commentId: N:Scrapbook101core.Models
  name: Scrapbook101core.Models
  nameWithType: Scrapbook101core.Models
  fullName: Scrapbook101core.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Scrapbook101core.Models.Item.Assets*
  commentId: Overload:Scrapbook101core.Models.Item.Assets
  name: Assets
  nameWithType: Item.Assets
  fullName: Scrapbook101core.Models.Item.Assets
- uid: System.Collections.Generic.List{Scrapbook101core.Models.AssetItem}
  commentId: T:System.Collections.Generic.List{Scrapbook101core.Models.AssetItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AssetItem>
  nameWithType: List<AssetItem>
  fullName: System.Collections.Generic.List<Scrapbook101core.Models.AssetItem>
  nameWithType.vb: List(Of AssetItem)
  fullName.vb: System.Collections.Generic.List(Of Scrapbook101core.Models.AssetItem)
  name.vb: List(Of AssetItem)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Scrapbook101core.Models.AssetItem
    name: AssetItem
    nameWithType: AssetItem
    fullName: Scrapbook101core.Models.AssetItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Scrapbook101core.Models.AssetItem
    name: AssetItem
    nameWithType: AssetItem
    fullName: Scrapbook101core.Models.AssetItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Scrapbook101core.Models.Item.AssetPath*
  commentId: Overload:Scrapbook101core.Models.Item.AssetPath
  name: AssetPath
  nameWithType: Item.AssetPath
  fullName: Scrapbook101core.Models.Item.AssetPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Scrapbook101core.Models.Item.Category*
  commentId: Overload:Scrapbook101core.Models.Item.Category
  name: Category
  nameWithType: Item.Category
  fullName: Scrapbook101core.Models.Item.Category
- uid: Scrapbook101core.Models.Item.CategoryFields*
  commentId: Overload:Scrapbook101core.Models.Item.CategoryFields
  name: CategoryFields
  nameWithType: Item.CategoryFields
  fullName: Scrapbook101core.Models.Item.CategoryFields
- uid: Scrapbook101core.Models.CategoryFields
  commentId: T:Scrapbook101core.Models.CategoryFields
  parent: Scrapbook101core.Models
  name: CategoryFields
  nameWithType: CategoryFields
  fullName: Scrapbook101core.Models.CategoryFields
- uid: Scrapbook101core.Models.Item.DateAdded*
  commentId: Overload:Scrapbook101core.Models.Item.DateAdded
  name: DateAdded
  nameWithType: Item.DateAdded
  fullName: Scrapbook101core.Models.Item.DateAdded
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Scrapbook101core.Models.Item.DateUpdated*
  commentId: Overload:Scrapbook101core.Models.Item.DateUpdated
  name: DateUpdated
  nameWithType: Item.DateUpdated
  fullName: Scrapbook101core.Models.Item.DateUpdated
- uid: Scrapbook101core.Models.Item.Description*
  commentId: Overload:Scrapbook101core.Models.Item.Description
  name: Description
  nameWithType: Item.Description
  fullName: Scrapbook101core.Models.Item.Description
- uid: Scrapbook101core.Models.Item.GeoLocation*
  commentId: Overload:Scrapbook101core.Models.Item.GeoLocation
  name: GeoLocation
  nameWithType: Item.GeoLocation
  fullName: Scrapbook101core.Models.Item.GeoLocation
- uid: Microsoft.Azure.Documents.Spatial.Point
  commentId: T:Microsoft.Azure.Documents.Spatial.Point
  parent: Microsoft.Azure.Documents.Spatial
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Azure.Documents.Spatial.Point
- uid: Microsoft.Azure.Documents.Spatial
  commentId: N:Microsoft.Azure.Documents.Spatial
  isExternal: true
  name: Microsoft.Azure.Documents.Spatial
  nameWithType: Microsoft.Azure.Documents.Spatial
  fullName: Microsoft.Azure.Documents.Spatial
- uid: Scrapbook101core.Models.Item.Id*
  commentId: Overload:Scrapbook101core.Models.Item.Id
  name: Id
  nameWithType: Item.Id
  fullName: Scrapbook101core.Models.Item.Id
- uid: Scrapbook101core.Models.Item.Location*
  commentId: Overload:Scrapbook101core.Models.Item.Location
  name: Location
  nameWithType: Item.Location
  fullName: Scrapbook101core.Models.Item.Location
- uid: Scrapbook101core.Models.Item.Rating*
  commentId: Overload:Scrapbook101core.Models.Item.Rating
  name: Rating
  nameWithType: Item.Rating
  fullName: Scrapbook101core.Models.Item.Rating
- uid: Scrapbook101core.Models.Item.UpdatedBy*
  commentId: Overload:Scrapbook101core.Models.Item.UpdatedBy
  name: UpdatedBy
  nameWithType: Item.UpdatedBy
  fullName: Scrapbook101core.Models.Item.UpdatedBy
- uid: Scrapbook101core.Models.Item.Title*
  commentId: Overload:Scrapbook101core.Models.Item.Title
  name: Title
  nameWithType: Item.Title
  fullName: Scrapbook101core.Models.Item.Title
- uid: Scrapbook101core.Models.Item.Type*
  commentId: Overload:Scrapbook101core.Models.Item.Type
  name: Type
  nameWithType: Item.Type
  fullName: Scrapbook101core.Models.Item.Type
