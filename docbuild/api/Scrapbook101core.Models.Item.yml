### YamlMime:ManagedReference
items:
- uid: Scrapbook101core.Models.Item
  commentId: T:Scrapbook101core.Models.Item
  id: Item
  parent: Scrapbook101core.Models
  children:
  - Scrapbook101core.Models.Item.AssetPath
  - Scrapbook101core.Models.Item.Assets
  - Scrapbook101core.Models.Item.Category
  - Scrapbook101core.Models.Item.CategoryFields
  - Scrapbook101core.Models.Item.DateAdded
  - Scrapbook101core.Models.Item.DateUpdated
  - Scrapbook101core.Models.Item.Description
  - Scrapbook101core.Models.Item.GeoLocation
  - Scrapbook101core.Models.Item.Id
  - Scrapbook101core.Models.Item.Location
  - Scrapbook101core.Models.Item.Rating
  - Scrapbook101core.Models.Item.Title
  - Scrapbook101core.Models.Item.Type
  - Scrapbook101core.Models.Item.UpdatedBy
  langs:
  - csharp
  - vb
  name: Item
  nameWithType: Item
  fullName: Scrapbook101core.Models.Item
  type: Class
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Item
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 15
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  summary: "\nDefines the main Scrapbook item or entry.\n"
  remarks: "\nA Scrapbook Item object when written to the Document DB bcomes a block of JSON-formatted text.\nNot all properties are required.\n"
  example: []
  syntax:
    content: 'public class Item : object'
    content.vb: >-
      Public Class Item
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Scrapbook101core.Models.Item.Assets
  commentId: P:Scrapbook101core.Models.Item.Assets
  id: Assets
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Assets
  nameWithType: Item.Assets
  fullName: Scrapbook101core.Models.Item.Assets
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Assets
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 20
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  example: []
  syntax:
    content: public List<AssetItem> Assets { get; set; }
    parameters: []
    return:
      type: List{Scrapbook101core.Models.AssetItem}
      description: "\nA list of assets associated with the item. Can be null, meaning no assets are associated with the item.\n"
    content.vb: Public Property Assets As List(Of AssetItem)
  overload: Scrapbook101core.Models.Item.Assets*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.AssetPath
  commentId: P:Scrapbook101core.Models.Item.AssetPath
  id: AssetPath
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: AssetPath
  nameWithType: Item.AssetPath
  fullName: Scrapbook101core.Models.Item.AssetPath
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: AssetPath
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 33
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  remarks: "\nFor example, there might be images, PDFs\nor other documents that give context about the item. Associating assets is not necessary if you plan to\nimplement Scrapbook101core without any assets. Part of the spirit behind Scrapbook101core however is\nto provide strong visual cues for remembering an item as well as archiving data associated with it,\nso at least one image for each Scrapbook101core is recommended. \n"
  example: []
  syntax:
    content: public string AssetPath { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nThis is the path to any digital assets associated with the item. Example value: &quot;assets/2019/2019-01-01&quot;.\n"
    content.vb: Public Property AssetPath As String
  overload: Scrapbook101core.Models.Item.AssetPath*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Category
  commentId: P:Scrapbook101core.Models.Item.Category
  id: Category
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Category
  nameWithType: Item.Category
  fullName: Scrapbook101core.Models.Item.Category
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Category
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 40
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  example: []
  syntax:
    content: public string Category { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nOne of the category values described in the <xref href=\"Scrapbook101core.Models.Category\" data-throw-if-not-resolved=\"false\"></xref> class.\nA Scrapbook101core item must be assigned to a category.\n"
    content.vb: Public Property Category As String
  overload: Scrapbook101core.Models.Item.Category*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.CategoryFields
  commentId: P:Scrapbook101core.Models.Item.CategoryFields
  id: CategoryFields
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: CategoryFields
  nameWithType: Item.CategoryFields
  fullName: Scrapbook101core.Models.Item.CategoryFields
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: CategoryFields
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 49
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  example: []
  syntax:
    content: public CategoryFields CategoryFields { get; set; }
    parameters: []
    return:
      type: Scrapbook101core.Models.CategoryFields
      description: "\nFields specific to the category selected for the Scrapbook101core item. \nSee the <xref href=\"Scrapbook101core.Models.Category\" data-throw-if-not-resolved=\"false\"></xref> class for more information.\nEach category has a fixed set of fields.\n"
    content.vb: Public Property CategoryFields As CategoryFields
  overload: Scrapbook101core.Models.Item.CategoryFields*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.DateAdded
  commentId: P:Scrapbook101core.Models.Item.DateAdded
  id: DateAdded
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: DateAdded
  nameWithType: Item.DateAdded
  fullName: Scrapbook101core.Models.Item.DateAdded
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: DateAdded
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 56
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  example: []
  syntax:
    content: public DateTime DateAdded { get; set; }
    parameters: []
    return:
      type: DateTime
      description: "\nThis value is automatically inserted by code upon initial creation of an item and then never changed.\nExample: A string that is an ISO 8601 date and time, e.g., &quot;2018-06-07T00:00:00&quot;.\n"
    content.vb: Public Property DateAdded As DateTime
  overload: Scrapbook101core.Models.Item.DateAdded*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.DateUpdated
  commentId: P:Scrapbook101core.Models.Item.DateUpdated
  id: DateUpdated
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: DateUpdated
  nameWithType: Item.DateUpdated
  fullName: Scrapbook101core.Models.Item.DateUpdated
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: DateUpdated
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 67
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  remarks: "\nOn initial creation of an Scrapbook101core item,\nthis property equals <strong>dateAdded</strong>. When an item is edited, this property is updated with the correct timestamp.\n"
  example: []
  syntax:
    content: public DateTime DateUpdated { get; set; }
    parameters: []
    return:
      type: DateTime
      description: "\nThis value is automatically inserted.\nExample: A string that is an ISO 8601 date and time, e.g., &quot;2018-06-07T00:00:00&quot;.\n"
    content.vb: Public Property DateUpdated As DateTime
  overload: Scrapbook101core.Models.Item.DateUpdated*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Description
  commentId: P:Scrapbook101core.Models.Item.Description
  id: Description
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Item.Description
  fullName: Scrapbook101core.Models.Item.Description
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Description
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 77
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  remarks: "\nThis property provides the\ncontext of why the item is important. Descriptions longer than a couple hundred words should be added as assets.\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nInformation about the Scrapbook101core item that isn&apos;t already captured in other fields.\n"
    content.vb: Public Property Description As String
  overload: Scrapbook101core.Models.Item.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.GeoLocation
  commentId: P:Scrapbook101core.Models.Item.GeoLocation
  id: GeoLocation
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: GeoLocation
  nameWithType: Item.GeoLocation
  fullName: Scrapbook101core.Models.Item.GeoLocation
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: GeoLocation
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 88
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  remarks: "\nA <a href=\"https://docs.microsoft.com/dotnet/api/microsoft.azure.documents.spatial.point\">Microsoft.Azure.Documents.Spatial.Point</a>\nIf you have a Bing Maps Key and it is specified in the appsettings.json file, then location values are\nconverted into latitude and longitude coordinates (geocoded) to allow for more flexible location searches.\n"
  example: []
  syntax:
    content: public Point GeoLocation { get; set; }
    parameters: []
    return:
      type: Point
      description: "\nRepresents a point geometry class in the Azure Cosmos DB service.\n"
    content.vb: Public Property GeoLocation As Point
  overload: Scrapbook101core.Models.Item.GeoLocation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Id
  commentId: P:Scrapbook101core.Models.Item.Id
  id: Id
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Item.Id
  fullName: Scrapbook101core.Models.Item.Id
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Id
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 94
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  example: []
  syntax:
    content: public string Id { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nAn auto-generated globally unique identifier (GUID), like &quot;c73af369-7a21-45dd-b9ec-fe31af354fe1&quot;.\n"
    content.vb: Public Property Id As String
  overload: Scrapbook101core.Models.Item.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Location
  commentId: P:Scrapbook101core.Models.Item.Location
  id: Location
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: Item.Location
  fullName: Scrapbook101core.Models.Item.Location
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Location
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 104
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  remarks: "\nIt is not required but is helpful. It is important to be consistent with how you enter values to make searching easier.\nExamples: &quot;Seattle, WA&quot; or &quot;101 Main St. Seattle 98103, USA&quot; or &quot;Italy&quot;.\n"
  example: []
  syntax:
    content: public string Location { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nA friendly name of the location that is relevant for the Scrapbook101core item.\n"
    content.vb: Public Property Location As String
  overload: Scrapbook101core.Models.Item.Location*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Rating
  commentId: P:Scrapbook101core.Models.Item.Rating
  id: Rating
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Rating
  nameWithType: Item.Rating
  fullName: Scrapbook101core.Models.Item.Rating
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Rating
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 114
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  remarks: "\nThe rating system will be unique for each implementation. The test data provided with Scrapbook101core\nuses a rating of 1 - 5.\n"
  example: []
  syntax:
    content: public string Rating { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nA rating of the Scrapbook101core item, if applicable.\n"
    content.vb: Public Property Rating As String
  overload: Scrapbook101core.Models.Item.Rating*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.UpdatedBy
  commentId: P:Scrapbook101core.Models.Item.UpdatedBy
  id: UpdatedBy
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: UpdatedBy
  nameWithType: Item.UpdatedBy
  fullName: Scrapbook101core.Models.Item.UpdatedBy
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: UpdatedBy
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 124
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  remarks: "\nThis could be a user name or ID. For example, if you implement\nan authentication scheme based on Windows Live, Facebook, or Google, you can use the user&apos;s email or ID in this field.\n"
  example: []
  syntax:
    content: public string UpdatedBy { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nAn identifier representing who changed the entry.\n"
    content.vb: Public Property UpdatedBy As String
  overload: Scrapbook101core.Models.Item.UpdatedBy*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Title
  commentId: P:Scrapbook101core.Models.Item.Title
  id: Title
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: Item.Title
  fullName: Scrapbook101core.Models.Item.Title
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Title
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 130
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  example: []
  syntax:
    content: public string Title { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nA descriptive title for the Scrapbook101core item. For example, if item is a book, use all or part of the book title.\n"
    content.vb: Public Property Title As String
  overload: Scrapbook101core.Models.Item.Title*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.Item.Type
  commentId: P:Scrapbook101core.Models.Item.Type
  id: Type
  parent: Scrapbook101core.Models.Item
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Item.Type
  fullName: Scrapbook101core.Models.Item.Type
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Item.cs
      branch: master
      repo: https://github.com/travelmarx/scrapbook101core
    id: Type
    path: ../Scrapbook101core/Models/Item.cs
    startLine: 141
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  summary: "\nDefines the Document DB entry type. \n"
  remarks: "\nThe value of the an item type is read from the appsettings.json file. For example, &quot;scrapbook101Item&quot;. The\ntype distinguished the item from other Document DB entries like category.\n"
  example: []
  syntax:
    content: public string Type { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Type As String
  overload: Scrapbook101core.Models.Item.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Scrapbook101core.Models
  commentId: N:Scrapbook101core.Models
  name: Scrapbook101core.Models
  nameWithType: Scrapbook101core.Models
  fullName: Scrapbook101core.Models
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Scrapbook101core.Models.Item.Assets*
  commentId: Overload:Scrapbook101core.Models.Item.Assets
  name: Assets
  nameWithType: Item.Assets
  fullName: Scrapbook101core.Models.Item.Assets
- uid: List{Scrapbook101core.Models.AssetItem}
  commentId: '!:List{Scrapbook101core.Models.AssetItem}'
  definition: List`1
  name: List<AssetItem>
  nameWithType: List<AssetItem>
  fullName: List<Scrapbook101core.Models.AssetItem>
  nameWithType.vb: List(Of AssetItem)
  fullName.vb: List(Of Scrapbook101core.Models.AssetItem)
  name.vb: List(Of AssetItem)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Scrapbook101core.Models.AssetItem
    name: AssetItem
    nameWithType: AssetItem
    fullName: Scrapbook101core.Models.AssetItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Scrapbook101core.Models.AssetItem
    name: AssetItem
    nameWithType: AssetItem
    fullName: Scrapbook101core.Models.AssetItem
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Scrapbook101core.Models.Item.AssetPath*
  commentId: Overload:Scrapbook101core.Models.Item.AssetPath
  name: AssetPath
  nameWithType: Item.AssetPath
  fullName: Scrapbook101core.Models.Item.AssetPath
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Scrapbook101core.Models.Category
  commentId: T:Scrapbook101core.Models.Category
  name: Category
  nameWithType: Category
  fullName: Scrapbook101core.Models.Category
- uid: Scrapbook101core.Models.Item.Category*
  commentId: Overload:Scrapbook101core.Models.Item.Category
  name: Category
  nameWithType: Item.Category
  fullName: Scrapbook101core.Models.Item.Category
- uid: Scrapbook101core.Models.Item.CategoryFields*
  commentId: Overload:Scrapbook101core.Models.Item.CategoryFields
  name: CategoryFields
  nameWithType: Item.CategoryFields
  fullName: Scrapbook101core.Models.Item.CategoryFields
- uid: Scrapbook101core.Models.CategoryFields
  commentId: T:Scrapbook101core.Models.CategoryFields
  parent: Scrapbook101core.Models
  name: CategoryFields
  nameWithType: CategoryFields
  fullName: Scrapbook101core.Models.CategoryFields
- uid: Scrapbook101core.Models.Item.DateAdded*
  commentId: Overload:Scrapbook101core.Models.Item.DateAdded
  name: DateAdded
  nameWithType: Item.DateAdded
  fullName: Scrapbook101core.Models.Item.DateAdded
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: Scrapbook101core.Models.Item.DateUpdated*
  commentId: Overload:Scrapbook101core.Models.Item.DateUpdated
  name: DateUpdated
  nameWithType: Item.DateUpdated
  fullName: Scrapbook101core.Models.Item.DateUpdated
- uid: Scrapbook101core.Models.Item.Description*
  commentId: Overload:Scrapbook101core.Models.Item.Description
  name: Description
  nameWithType: Item.Description
  fullName: Scrapbook101core.Models.Item.Description
- uid: Scrapbook101core.Models.Item.GeoLocation*
  commentId: Overload:Scrapbook101core.Models.Item.GeoLocation
  name: GeoLocation
  nameWithType: Item.GeoLocation
  fullName: Scrapbook101core.Models.Item.GeoLocation
- uid: Point
  commentId: '!:Point'
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Point
- uid: Scrapbook101core.Models.Item.Id*
  commentId: Overload:Scrapbook101core.Models.Item.Id
  name: Id
  nameWithType: Item.Id
  fullName: Scrapbook101core.Models.Item.Id
- uid: Scrapbook101core.Models.Item.Location*
  commentId: Overload:Scrapbook101core.Models.Item.Location
  name: Location
  nameWithType: Item.Location
  fullName: Scrapbook101core.Models.Item.Location
- uid: Scrapbook101core.Models.Item.Rating*
  commentId: Overload:Scrapbook101core.Models.Item.Rating
  name: Rating
  nameWithType: Item.Rating
  fullName: Scrapbook101core.Models.Item.Rating
- uid: Scrapbook101core.Models.Item.UpdatedBy*
  commentId: Overload:Scrapbook101core.Models.Item.UpdatedBy
  name: UpdatedBy
  nameWithType: Item.UpdatedBy
  fullName: Scrapbook101core.Models.Item.UpdatedBy
- uid: Scrapbook101core.Models.Item.Title*
  commentId: Overload:Scrapbook101core.Models.Item.Title
  name: Title
  nameWithType: Item.Title
  fullName: Scrapbook101core.Models.Item.Title
- uid: Scrapbook101core.Models.Item.Type*
  commentId: Overload:Scrapbook101core.Models.Item.Type
  name: Type
  nameWithType: Item.Type
  fullName: Scrapbook101core.Models.Item.Type
