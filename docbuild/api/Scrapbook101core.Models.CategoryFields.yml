### YamlMime:ManagedReference
items:
- uid: Scrapbook101core.Models.CategoryFields
  commentId: T:Scrapbook101core.Models.CategoryFields
  id: CategoryFields
  parent: Scrapbook101core.Models
  children:
  - Scrapbook101core.Models.CategoryFields.Artist
  - Scrapbook101core.Models.CategoryFields.Author
  - Scrapbook101core.Models.CategoryFields.BirthDate
  - Scrapbook101core.Models.CategoryFields.BirthPlace
  - Scrapbook101core.Models.CategoryFields.DeathDate
  - Scrapbook101core.Models.CategoryFields.DeathPlace
  - Scrapbook101core.Models.CategoryFields.Director
  - Scrapbook101core.Models.CategoryFields.Genre
  - Scrapbook101core.Models.CategoryFields.Highlight
  - Scrapbook101core.Models.CategoryFields.Item(System.String)
  - Scrapbook101core.Models.CategoryFields.Location
  - Scrapbook101core.Models.CategoryFields.Lodging
  - Scrapbook101core.Models.CategoryFields.Synopsis
  - Scrapbook101core.Models.CategoryFields.Theme
  - Scrapbook101core.Models.CategoryFields.Type
  - Scrapbook101core.Models.CategoryFields.Who
  - Scrapbook101core.Models.CategoryFields.Year
  langs:
  - csharp
  - vb
  name: CategoryFields
  nameWithType: CategoryFields
  fullName: Scrapbook101core.Models.CategoryFields
  type: Class
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: CategoryFields
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 47
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  summary: "\nRepresents all the possible category fields. A category field may apply to some categories and not to others.\n"
  example: []
  syntax:
    content: public class CategoryFields
    content.vb: Public Class CategoryFields
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Scrapbook101core.Models.CategoryFields.Item(System.String)
  commentId: P:Scrapbook101core.Models.CategoryFields.Item(System.String)
  id: Item(System.String)
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: CategoryFields.Item[String]
  fullName: Scrapbook101core.Models.CategoryFields.Item[System.String]
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: this[]
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 52
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonIgnore]

      public object this[string propertyName] { get; set; }
    parameters:
    - id: propertyName
      type: System.String
    return:
      type: System.Object
    content.vb: >-
      <JsonIgnore>

      Public Property Item(propertyName As String) As Object
  overload: Scrapbook101core.Models.CategoryFields.Item*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  nameWithType.vb: CategoryFields.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Scrapbook101core.Models.CategoryFields.Item(System.String)
  name.vb: Item(String)
- uid: Scrapbook101core.Models.CategoryFields.Artist
  commentId: P:Scrapbook101core.Models.CategoryFields.Artist
  id: Artist
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Artist
  nameWithType: CategoryFields.Artist
  fullName: Scrapbook101core.Models.CategoryFields.Artist
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Artist
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 59
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "artist")]

      public string Artist { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="artist")>

      Public Property Artist As String
  overload: Scrapbook101core.Models.CategoryFields.Artist*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: artist
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Author
  commentId: P:Scrapbook101core.Models.CategoryFields.Author
  id: Author
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Author
  nameWithType: CategoryFields.Author
  fullName: Scrapbook101core.Models.CategoryFields.Author
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Author
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 62
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "author")]

      public string Author { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="author")>

      Public Property Author As String
  overload: Scrapbook101core.Models.CategoryFields.Author*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: author
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.BirthDate
  commentId: P:Scrapbook101core.Models.CategoryFields.BirthDate
  id: BirthDate
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: BirthDate
  nameWithType: CategoryFields.BirthDate
  fullName: Scrapbook101core.Models.CategoryFields.BirthDate
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: BirthDate
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 65
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "birthDate")]

      public string BirthDate { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="birthDate")>

      Public Property BirthDate As String
  overload: Scrapbook101core.Models.CategoryFields.BirthDate*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: birthDate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.BirthPlace
  commentId: P:Scrapbook101core.Models.CategoryFields.BirthPlace
  id: BirthPlace
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: BirthPlace
  nameWithType: CategoryFields.BirthPlace
  fullName: Scrapbook101core.Models.CategoryFields.BirthPlace
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: BirthPlace
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 68
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "birthPlace")]

      public string BirthPlace { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="birthPlace")>

      Public Property BirthPlace As String
  overload: Scrapbook101core.Models.CategoryFields.BirthPlace*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: birthPlace
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.DeathDate
  commentId: P:Scrapbook101core.Models.CategoryFields.DeathDate
  id: DeathDate
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: DeathDate
  nameWithType: CategoryFields.DeathDate
  fullName: Scrapbook101core.Models.CategoryFields.DeathDate
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: DeathDate
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 71
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deathDate")]

      public string DeathDate { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="deathDate")>

      Public Property DeathDate As String
  overload: Scrapbook101core.Models.CategoryFields.DeathDate*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: deathDate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.DeathPlace
  commentId: P:Scrapbook101core.Models.CategoryFields.DeathPlace
  id: DeathPlace
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: DeathPlace
  nameWithType: CategoryFields.DeathPlace
  fullName: Scrapbook101core.Models.CategoryFields.DeathPlace
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: DeathPlace
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 74
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deathPlace")]

      public string DeathPlace { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="deathPlace")>

      Public Property DeathPlace As String
  overload: Scrapbook101core.Models.CategoryFields.DeathPlace*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: deathPlace
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Director
  commentId: P:Scrapbook101core.Models.CategoryFields.Director
  id: Director
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Director
  nameWithType: CategoryFields.Director
  fullName: Scrapbook101core.Models.CategoryFields.Director
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Director
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 77
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "director")]

      public string Director { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="director")>

      Public Property Director As String
  overload: Scrapbook101core.Models.CategoryFields.Director*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: director
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Genre
  commentId: P:Scrapbook101core.Models.CategoryFields.Genre
  id: Genre
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Genre
  nameWithType: CategoryFields.Genre
  fullName: Scrapbook101core.Models.CategoryFields.Genre
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Genre
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 80
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "genre")]

      public string Genre { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="genre")>

      Public Property Genre As String
  overload: Scrapbook101core.Models.CategoryFields.Genre*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: genre
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Highlight
  commentId: P:Scrapbook101core.Models.CategoryFields.Highlight
  id: Highlight
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Highlight
  nameWithType: CategoryFields.Highlight
  fullName: Scrapbook101core.Models.CategoryFields.Highlight
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Highlight
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 83
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "highlight")]

      public string Highlight { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="highlight")>

      Public Property Highlight As String
  overload: Scrapbook101core.Models.CategoryFields.Highlight*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: highlight
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Location
  commentId: P:Scrapbook101core.Models.CategoryFields.Location
  id: Location
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: CategoryFields.Location
  fullName: Scrapbook101core.Models.CategoryFields.Location
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Location
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 86
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "location")]

      public string Location { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="location")>

      Public Property Location As String
  overload: Scrapbook101core.Models.CategoryFields.Location*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: location
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Lodging
  commentId: P:Scrapbook101core.Models.CategoryFields.Lodging
  id: Lodging
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Lodging
  nameWithType: CategoryFields.Lodging
  fullName: Scrapbook101core.Models.CategoryFields.Lodging
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Lodging
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 89
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lodging")]

      public string Lodging { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="lodging")>

      Public Property Lodging As String
  overload: Scrapbook101core.Models.CategoryFields.Lodging*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: lodging
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Synopsis
  commentId: P:Scrapbook101core.Models.CategoryFields.Synopsis
  id: Synopsis
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Synopsis
  nameWithType: CategoryFields.Synopsis
  fullName: Scrapbook101core.Models.CategoryFields.Synopsis
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Synopsis
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 92
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "synopsis")]

      public string Synopsis { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="synopsis")>

      Public Property Synopsis As String
  overload: Scrapbook101core.Models.CategoryFields.Synopsis*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: synopsis
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Theme
  commentId: P:Scrapbook101core.Models.CategoryFields.Theme
  id: Theme
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Theme
  nameWithType: CategoryFields.Theme
  fullName: Scrapbook101core.Models.CategoryFields.Theme
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Theme
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 95
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "theme")]

      public string Theme { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="theme")>

      Public Property Theme As String
  overload: Scrapbook101core.Models.CategoryFields.Theme*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: theme
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Type
  commentId: P:Scrapbook101core.Models.CategoryFields.Type
  id: Type
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: CategoryFields.Type
  fullName: Scrapbook101core.Models.CategoryFields.Type
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Type
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 98
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "type")]

      public string Type { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="type")>

      Public Property Type As String
  overload: Scrapbook101core.Models.CategoryFields.Type*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: type
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Who
  commentId: P:Scrapbook101core.Models.CategoryFields.Who
  id: Who
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Who
  nameWithType: CategoryFields.Who
  fullName: Scrapbook101core.Models.CategoryFields.Who
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Who
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 101
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "who")]

      public string Who { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="who")>

      Public Property Who As String
  overload: Scrapbook101core.Models.CategoryFields.Who*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: who
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Scrapbook101core.Models.CategoryFields.Year
  commentId: P:Scrapbook101core.Models.CategoryFields.Year
  id: Year
  parent: Scrapbook101core.Models.CategoryFields
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: CategoryFields.Year
  fullName: Scrapbook101core.Models.CategoryFields.Year
  type: Property
  source:
    remote:
      path: Scrapbook101core/Models/Category.cs
      branch: main
      repo: https://github.com/travelmarx/scrapbook101core.git
    id: Year
    path: ../Scrapbook101core/Models/Category.cs
    startLine: 104
  assemblies:
  - Scrapbook101core
  namespace: Scrapbook101core.Models
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "Year")]

      public string Year { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore, PropertyName:="Year")>

      Public Property Year As String
  overload: Scrapbook101core.Models.CategoryFields.Year*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: Year
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Scrapbook101core.Models
  commentId: N:Scrapbook101core.Models
  name: Scrapbook101core.Models
  nameWithType: Scrapbook101core.Models
  fullName: Scrapbook101core.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Scrapbook101core.Models.CategoryFields.Item*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Item
  name: Item
  nameWithType: CategoryFields.Item
  fullName: Scrapbook101core.Models.CategoryFields.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Scrapbook101core.Models.CategoryFields.Artist*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Artist
  name: Artist
  nameWithType: CategoryFields.Artist
  fullName: Scrapbook101core.Models.CategoryFields.Artist
- uid: Scrapbook101core.Models.CategoryFields.Author*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Author
  name: Author
  nameWithType: CategoryFields.Author
  fullName: Scrapbook101core.Models.CategoryFields.Author
- uid: Scrapbook101core.Models.CategoryFields.BirthDate*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.BirthDate
  name: BirthDate
  nameWithType: CategoryFields.BirthDate
  fullName: Scrapbook101core.Models.CategoryFields.BirthDate
- uid: Scrapbook101core.Models.CategoryFields.BirthPlace*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.BirthPlace
  name: BirthPlace
  nameWithType: CategoryFields.BirthPlace
  fullName: Scrapbook101core.Models.CategoryFields.BirthPlace
- uid: Scrapbook101core.Models.CategoryFields.DeathDate*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.DeathDate
  name: DeathDate
  nameWithType: CategoryFields.DeathDate
  fullName: Scrapbook101core.Models.CategoryFields.DeathDate
- uid: Scrapbook101core.Models.CategoryFields.DeathPlace*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.DeathPlace
  name: DeathPlace
  nameWithType: CategoryFields.DeathPlace
  fullName: Scrapbook101core.Models.CategoryFields.DeathPlace
- uid: Scrapbook101core.Models.CategoryFields.Director*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Director
  name: Director
  nameWithType: CategoryFields.Director
  fullName: Scrapbook101core.Models.CategoryFields.Director
- uid: Scrapbook101core.Models.CategoryFields.Genre*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Genre
  name: Genre
  nameWithType: CategoryFields.Genre
  fullName: Scrapbook101core.Models.CategoryFields.Genre
- uid: Scrapbook101core.Models.CategoryFields.Highlight*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Highlight
  name: Highlight
  nameWithType: CategoryFields.Highlight
  fullName: Scrapbook101core.Models.CategoryFields.Highlight
- uid: Scrapbook101core.Models.CategoryFields.Location*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Location
  name: Location
  nameWithType: CategoryFields.Location
  fullName: Scrapbook101core.Models.CategoryFields.Location
- uid: Scrapbook101core.Models.CategoryFields.Lodging*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Lodging
  name: Lodging
  nameWithType: CategoryFields.Lodging
  fullName: Scrapbook101core.Models.CategoryFields.Lodging
- uid: Scrapbook101core.Models.CategoryFields.Synopsis*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Synopsis
  name: Synopsis
  nameWithType: CategoryFields.Synopsis
  fullName: Scrapbook101core.Models.CategoryFields.Synopsis
- uid: Scrapbook101core.Models.CategoryFields.Theme*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Theme
  name: Theme
  nameWithType: CategoryFields.Theme
  fullName: Scrapbook101core.Models.CategoryFields.Theme
- uid: Scrapbook101core.Models.CategoryFields.Type*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Type
  name: Type
  nameWithType: CategoryFields.Type
  fullName: Scrapbook101core.Models.CategoryFields.Type
- uid: Scrapbook101core.Models.CategoryFields.Who*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Who
  name: Who
  nameWithType: CategoryFields.Who
  fullName: Scrapbook101core.Models.CategoryFields.Who
- uid: Scrapbook101core.Models.CategoryFields.Year*
  commentId: Overload:Scrapbook101core.Models.CategoryFields.Year
  name: Year
  nameWithType: CategoryFields.Year
  fullName: Scrapbook101core.Models.CategoryFields.Year
